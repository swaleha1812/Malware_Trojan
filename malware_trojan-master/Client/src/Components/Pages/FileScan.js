import React, { useState } from 'react';
import './FileScan.css';
//import axios from 'axios';
import Sidebar from '../Dashboard/Sidebar';
import Box from '@mui/material/Box';
//import { isDisabled } from '@testing-library/user-event/dist/utils';

const FileScan = () => {
  const [file, setFile] = useState(null);
  const [isAnalyzed, setIsAnalyzed] = useState(false);
  const [message, setMessage] = useState('');
  const [errorMessage, setErrorMessage] = useState('');


  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
    setIsAnalyzed(false);
    setMessage('');
    setErrorMessage('');
  };

  const handleAnalyze = async () => {
    if (!file) {
      setErrorMessage('Please select a file to analyze.');
      return;
    }

    try {
     
      const isMalicious = await analyzeFile(file); // Call your analysis logic
      setIsAnalyzed(true);
      setMessage(isMalicious ? 'Malicious file detected' : 'File appears to be safe');
    } catch (error) {
      console.error('Error analyzing file:', error);
      setErrorMessage('Analysis failed. Please try again.');
    }
  };

  // Placeholder for your file analysis logic (replace with your implementation)
  async function analyzeFile(file) {
   

    const maliciousExtensions = ['.exe', '.bat', '.js', '.txt', '.apk', '.zip', '.rar', '.pkl']; // Example list
    const isMaliciousExtension = maliciousExtensions.includes(file.name.toLowerCase().slice(-4));

    if (isMaliciousExtension) {
      return true;
    }

    
    return false; // Default to non-malicious if no other analysis is performed
  }
  return (
    <>
      <Box height={100} />
      <Box sx={{ display: 'flex' }}>
        <Sidebar />
        <Box component="main" sx={{ flexGrow: 1, p: 3 }}>
          <div className='fileScan'>
            <input type="file" accept=".txt,.pdf,.doc,.docx" onChange={handleFileChange} />
            {/*<progress > 0 && <progress value={progress} max="100" />*/}
            {isAnalyzed && <p>{message}</p>}
            {errorMessage && <p className="error-message">{errorMessage}</p>}
            {file && <button onClick={handleAnalyze} disabled={isAnalyzed} className="uploadButton">Scan</button>}
          </div>
        </Box>
      </Box>
    </>
  );
};

export default FileScan;
