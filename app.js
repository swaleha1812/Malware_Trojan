
/*
const express = require('express');
const multer = require('multer');
const path = require('path');

const app = express();
const port = 3000; // Match the port used in the frontend

const upload = multer({ dest: 'uploads/' });

const allowedExtensions = ['apk']; // Expand for allowed types

app.post('/upload-endpoint', upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: 'No file uploaded' });
    }

    if (!allowedFile(req.file.originalname)) {
      return res.status(400).json({ message: 'Invalid file type' });
    }

    const isMalicious = await analyzeFile(req.file.path);
    const message = isMalicious ? 'Malicious' : 'Non-malicious';

    res.json({ message });
  } catch (error) {
    console.error('Error processing file:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Helper function to validate file extensions
function allowedFile(filename) {
  const ext = path.extname(filename).toLowerCase();
  return allowedExtensions.includes(ext);
}

// Function to analyze the file for malicious content (replace with your analysis logic)
async function analyzeFile(filename) {
  try {
    if (filename.endsWith('.apk')) {
      // Use a library for APK analysis (e.g., apkanalyzer)
      const isApkMalicious = await analyzeApk(filename);
      return isApkMalicious;
    } 
    else {
      // Implement analysis for other file types as needed
      // ...

    }

    // Default to non-malicious if no analysis is performed
    return false;
  } catch (error) {
    console.error('Error analyzing file:', error);
    return true; // Treat as malicious in case of analysis errors
  }
}

// Example using a hypothetical library for APK analysis (not a real library)

async function analyzeApk(filename) {
  const apkanalyzer = require('apkanalyzer'); // Replace with your actual library
  const result = await apkanalyzer.analyze(filename);
  return result.isMalicious;
}


app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
*/

const express = require('express');
const multer = require('multer');

const app = express();
const port = 3000;

const upload = multer({ dest: 'uploads/' });

app.post('http://localhost:3000/upload-endpoint', upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: 'No file uploaded' });
    }

    const isMalicious = await analyzeFile(req.file.path); // Replace with your analysis logic
    const message = isMalicious ? 'Malicious' : 'Non-malicious';

    res.json({ message });
  } catch (error) {
    console.error('Error processing file:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Placeholder for your file analysis logic
async function analyzeFile(filename) {
  // Implement your logic to analyze the file for malicious content
  // Return true if malicious, false otherwise
  if (filename.endsWith('.apk')) {
    // Use a library for APK analysis (e.g., apkanalyzer)
    //const isApkMalicious = await analyzeApk(filename);
    return true;
  } 
  else{
    return false;
  }
}

app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
